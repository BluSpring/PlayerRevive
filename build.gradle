plugins {
    id 'eclipse'
    id 'idea'
    id 'fabric-loom' version '1.6-SNAPSHOT'
}

group= "team.creative" + project.mod_id

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

repositories {
    flatDir {
        dir 'libs'
    }

    maven {
        url "https://maven.architectury.dev/"
    }
    maven {
        name = 'ParchmentMC'
        url = 'https://maven.parchmentmc.org'
    }

    maven {
        name = "DevOS One"
        url "https://mvn.devos.one/releases/"
    }

    maven {
        name = "JitPack"
        url "https://jitpack.io/"
    }

    maven {
        name = "Cafeteria Dev"
        url "https://maven.cafeteria.dev/releases/"
    }

    maven {
        name = "JamiesWhiteShirt Dev"
        url "https://maven.jamieswhiteshirt.com/libs-release"
        content {
            includeGroup("com.jamieswhiteshirt")
        }
    }
    repositories {
        maven {
            url "https://cursemaven.com"
            content {
                includeGroup "curse.maven"
            }
        }
    }

}

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings loom.layered() {
        officialMojangMappings()
        //parchment("org.parchmentmc.data:parchment-1.20.1:2023.09.03@zip")
    }
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    // Fabric API. This is technically optional, but you probably want it anyway.
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    modImplementation "curse.maven:creativecore-257814:5342971"

    def portingLibs = ["asm", "accessors", "attributes", "base", "client_events", "common", "core", "config", "data", "entity", "extensions", "items", "mixin_extensions", "networking", "utility" ]
    for (lib in portingLibs) {
        modImplementation(include("io.github.fabricators_of_create.Porting-Lib:$lib:${property("porting_lib_version")}"))
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}
